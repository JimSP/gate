/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 11 03:42:12 BRST 2018
 */

package com.github.jimsp.gate.entities;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedList;
import java.util.List;

import org.junit.Test;

import com.github.jimsp.gate.rbac.entities.Permission;
import com.github.jimsp.gate.rbac.entities.Role;

public class Role_ESTest {

  @Test
  public void test00()  throws Throwable  {
      Role role0 = new Role();
      role0.setName("");
      role0.hashCode();
  }

  @Test
  public void test01()  throws Throwable  {
      Role role0 = new Role();
      role0.setPermanent(true);
      boolean boolean0 = role0.isPermanent();
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Role role0 = new Role();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      role0.setPermissions(linkedList0);
      List<Permission> list0 = role0.getPermissions();
      assertEquals(0, list0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      Role role0 = new Role();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      Permission permission0 = new Permission();
      linkedList0.add(permission0);
      role0.setPermissions(linkedList0);
      List<Permission> list0 = role0.getPermissions();
      assertFalse(list0.isEmpty());
  }

  @Test
  public void test04()  throws Throwable  {
      Role role0 = new Role();
      role0.setName("u");
      String string0 = role0.getName();
      assertEquals("u", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Role role0 = new Role();
      role0.setDescription("Z");
      String string0 = role0.getDescription();
      assertEquals("Z", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      Role role0 = new Role();
      LinkedList<Role> linkedList0 = new LinkedList<Role>();
      linkedList0.add(role0);
      role0.setChildRoleNames(linkedList0);
      List<Role> list0 = role0.getChildRoleNames();
      assertFalse(list0.isEmpty());
  }

  @Test
  public void test07()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      boolean boolean0 = role0.equals(role1);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      Role role0 = new Role();
      boolean boolean0 = role0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Role role0 = new Role();
      boolean boolean0 = role0.equals(role0);
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Role role0 = new Role();
      role0.setName("");
      String string0 = role0.getName();
      assertEquals("", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getDescription();
      assertNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      Role role0 = new Role();
      boolean boolean0 = role0.isPermanent();
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Role role0 = new Role();
      role0.setAssignable(true);
      boolean boolean0 = role0.isAssignable();
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      Role role0 = new Role();
      LinkedList<Role> linkedList0 = new LinkedList<Role>();
      role0.setChildRoleNames(linkedList0);
      List<Role> list0 = role0.getChildRoleNames();
      assertTrue(list0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      Role role0 = new Role();
      role0.setDescription("");
      String string0 = role0.getDescription();
      assertEquals("", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      Role role0 = new Role();
      List<Permission> list0 = role0.getPermissions();
      assertNull(list0);
  }

  @Test
  public void test19()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getName();
      assertNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      Role role0 = new Role();
      boolean boolean0 = role0.isAssignable();
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Role role0 = new Role();
      List<Role> list0 = role0.getChildRoleNames();
      assertNull(list0);
  }
}
